name: Build images and runs end to end tests

on:
  push:

env:
  DAGGER_LOG_FORMAT: plain
  DAGGER_CACHE_BASE: dagger-ci-build

jobs:
  build-images:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    env:
      GITHUB_ACTOR: ${{ github.actor }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      DAGGER_CACHE_TO: type=gha,mode=max,scope=dagger-ci-build-main
      DAGGER_CACHE_FROM: type=gha,scope=dagger-ci-build-main

    steps:
      - uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v2

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Dagger
        uses: dagger/dagger-for-github@v3
        with:
          install-only: true

      - name: Dagger project update
        run: dagger project update

      - name: Building images
        run: dagger do testRunContainers --log-format plain

      - name: Pushing images
        run: dagger do pushImages --log-format plain

  run-tests:
    needs: build-images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      ALGOLIA_PRIVATE_API_KEY: ${{ secrets.ALGOLIA_PRIVATE_API_KEY }}
      ALGOLIA_APPLICATION_ID: ${{ secrets.ALGOLIA_APPLICATION_ID }}
      ALGOLIA_SEARCH_ONLY_API_KEY: ${{ secrets.ALGOLIA_SEARCH_ONLY_API_KEY }}
      FB_API_KEY: ${{ secrets.FB_API_KEY }}
      FB_AUTH_DOMAIN: ${{ secrets.FB_AUTH_DOMAIN }}
      FB_PROJECT_ID: ${{ secrets.FB_PROJECT_ID }}
      FB_STORAGE_BUCKET: ${{ secrets.FB_STORAGE_BUCKET }}
      FB_MESSAGING_SENDER_ID: ${{ secrets.FB_MESSAGING_SENDER_ID }},
      FB_APP_ID: ${{ secrets.FB_APP_ID }}
      FB_MEASUREMENT_ID: ${{ secrets.FB_MEASUREMENT_ID }}
    steps:
      - uses: actions/checkout@v2
      - run: |
          ls -lah
      - run: sed
          -e "s/<ALGOLIA_APPLICATION_ID>/$ALGOLIA_APPLICATION_ID/"
          -e "s/<ALGOLIA_SEARCH_ONLY_API_KEY>/$ALGOLIA_SEARCH_ONLY_API_KEY/"
          config/example-config-algolia.js > config/config-algolia.js
      - run: sed
          -e "s/<FB_API_KEY>/$FB_API_KEY/"
          -e "s/<FB_AUTH_DOMAIN>/$FB_AUTH_DOMAIN/"
          -e "s/<FB_PROJECT_ID>/$FB_PROJECT_ID/"
          -e "s/<FB_STORAGE_BUCKET>/$FB_STORAGE_BUCKET/"
          -e "s/<FB_MESSAGING_SENDER_ID>/$FB_MESSAGING_SENDER_ID/"
          -e "s/<FB_APP_ID>/$FB_APP_ID/"
          -e "s/<FB_MEASUREMENT_ID>/$FB_MEASUREMENT_ID/"
          config/example-config-firebase.js > config/config-firebase.js
      - run: |
          ls -lah config/
      - run: rm -rf node_modules
      - run: rm -rf test-results
      - run: rm -rf config/algolia-secret-admin-api-key.txt
      - run: echo -n $ALGOLIA_PRIVATE_API_KEY >> config/algolia-secret-admin-api-key.txt
      - run: |
          ls -lah
      - run: sed
          -e "s/<EXTRA>//"
          -e "s/<GITHUB_REF_NAME>/$GITHUB_REF_NAME/"
          ci/actions-docker-compose.yml > test.yml

      - run: docker-compose -f test.yml up -d --remove-orphans
      - run: sleep 40
      - run: docker-compose -f test.yml logs sveltekit-test
      - run: docker-compose -f test.yml logs firebase
      - run: echo "running ping tests"
      - run: docker-compose -f test.yml exec -T playwright npx playwright test --project=docker --grep @ping
      - run: echo "running playwright goal tests"
      - run: docker-compose -f test.yml exec -T playwright npx playwright test --project=docker --grep @goal
      - run: docker-compose -f test.yml logs sveltekit-test
      - run: docker-compose -f test.yml logs firebase
      - run: echo "running playwright activity tests"
      - run: docker-compose -f test.yml exec -T playwright npx playwright test --project=docker --grep @activity
      - run: docker-compose -f test.yml logs sveltekit-test
      - run: docker-compose -f test.yml logs firebase
      - run: echo "running playwright module tests"
      - run: docker-compose -f test.yml exec -T playwright npx playwright test --project=docker --grep @module
      - run: docker-compose -f test.yml logs sveltekit-test
      - run: docker-compose -f test.yml logs firebase

      - name: Archive production artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: playwright-traces
          path: |
            test-results
      
      - name: Display Firebase logs on failure
        if: ${{ failure() }}
        run: docker-compose -f test.yml logs firebase
      - name: Display SvelteKit logs on failure
        if: ${{ failure() }}
        run: docker-compose -f test.yml logs sveltekit-test
